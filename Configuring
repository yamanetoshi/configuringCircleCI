\section{File structure and content}
\label{sec:1-1}

以下の六つの primary section より作られます。それぞれの section はテスト実行フェーズを表します。

\begin{itemize}
\item machine: VM をあなたの選択や要件に合わせます
\item checkout: あなたの git repo を clone し checkout します
\item dependencies: あなたのプロジェクトの言語固有の要件をセットアップします
\item database: あなたのテストのためのデータベースを用意します
\item test: あなたのテストを実行します
\item deployment: あなたのコードをあなたの Web サーバに deploy します
\end{itemize}

他に general と experimental というセクションがある模様。

\begin{itemize}
\item general: 固有のフェーズに関連しない全般的なビルド関連設定
\item experimental: 検討中の設定変更の early access preview
\end{itemize}

ほとんどのプロジェクトはフェーズの多くのための何らかを記述する必要はないでしょう。

セクションは bash コマンドのリストを含みます。コマンドを記述しない場合でも CircleCI がコードから推論するでしょう。コマンドはファイルに記載された順に実行され、全てのテストコマンドが実行されますが、設定中の非ゼロ値の戻りは早めにビルド失敗を発生させるでしょう。\texttt{override}、\texttt{pre}、\texttt{post} の追加で「どこ」や「いつ」コマンドが動くかを CircleCI が推論するコマンドに合わせて変更することができます。その仕組みは以下です。

\begin{itemize}
\item pre: CircleCI が推論するコマンドの前に実行されるコマンド
\item override: CircleCI が推論するコマンドの代わりに実行されるコマンド
\item post: CircleCI が推論するコマンドの後に実行されるコマンド
\end{itemize}

それぞれのコマンドは個別の shell にて実行されます。そうした事情で、前のコマンドにおける環境は共有されませんので \texttt{export foo=bar} が機能しないことに注意してください。もしグローバルな環境変数を設定したいのであれば、それらを以下に記載する Machine configuration セクションに記述することができます。

\subsection*{Modifiers}
\label{sec:1-1-1}

修飾子 (modifier) の追加によりそれぞれのコマンドを微調整できます。使うことができるものは以下。

\begin{itemize}
\item timeout: 出力なしで長い時間動いている場合、強制終了します (デフォルトは 600 秒)
\item pwd: この値をカレントディレクトリとしてコマンドを実行します
\item environment: コマンドのために設定される環境変数のリストを生成する hash
\item parallel: (test セクションのコマンドのみ) \href{https://circleci.com/docs/parallel-manual-setup}{manually set up parallelism} を使う場合はこの値を true にします
\item files: file list で識別される files はコマンド引数に追加されます。files はビルドが動いている全てのコンテナにわたって配布されます。詳細は \href{https://circleci.com/docs/parallel-manual-setup\#auto-splitting}{manual parallelism setup document} を確認のこと
\item background: true の場合、コマンドをバックグラウンドで実行します。shell コマンドの末端に '\&' を付けたものに似ていますが ssh 経由で確実に動きます。試験が接続するサーバを開始するのに便利です
\end{itemize}

YAML が新たなプロパティを追加する度、インデントについて非常に厳密であることに注意してください。このため modifiers はコマンドから 1 レベルインデントされていなければなりません。以下の例では \texttt{bundle install} が \texttt{timeout}、\texttt{environment}、および \texttt{pwd} のキーのハッシュ値とともに扱われます。

\begin{reviewemlist}
dependencies:
  override:
    {-} bundle install:
        timeout: 240
        environment:
          foo: bar
          foo2: bar2
        pwd:
          test\textunderscore{}dir
\end{reviewemlist}

\section{Machine configuration}
\label{sec:1-2}

\texttt{machine} セクションはテストを実行する VM の設定を可能します。

以下に \texttt{machine} セクションで設定される可能性があるものの一例です。

\begin{reviewemlist}
machine:
  timezone:
    America/Los\textunderscore{}Angeles
  ruby:
    version: 1.9.3{-}p0{-}falcon

test:
  post:
    {-} bundle exec rake custom:test:suite
\end{reviewemlist}

この例では \texttt{time zone} の設定と \texttt{Ruby version} と patchset の選択、そしてコマンドが終了した後で動作するカスタムテストコマンドが追加されている。

\texttt{machine} セクションでは \texttt{pre} および \texttt{post} がサポートされていますが、\texttt{override} はそうではありません。\texttt{machine pre} セクションにおいてはカスタム環境変数は有効ではないことに注意してください。

以下はどのように \texttt{circle.yml} を \texttt{pre} を使って CircleCI に導入されているものと異なるバージョンの \texttt{phantomjs} を導入するかという例です。

\begin{reviewemlist}
machine:
  pre:
    {-} curl {-}k {-}L {-}o phantomjs.tar.bz2 http://phantomjs.googlecode.com/files/phantomjs{-}1.8.2{-}linux{-}x86\textunderscore{}64.tar.bz2
    {-} tar {-}jxf phantomjs.tar.bz2
\end{reviewemlist}

\subsection*{Environment}
\label{sec:1-2-1}

\texttt{machine} セクションに \texttt{environment} の追加により、ビルドにおける全てのコマンドのための環境変数を設定します。CircleCI は全てのコマンドに新たな shell を使うことを覚えておいて下さい。\texttt{export foo=bar} は前に書いたとおり動きません。代わりに以下を include する必要があります。

\begin{reviewemlist}
machine:
  environment:
    foo: bar
    baz: 123
\end{reviewemlist}

この方法を使わない場合、\href{https://circleci.com/docs/environment-variables}{a number of other options} があります。

\subsection*{Timezone}
\label{sec:1-2-2}

マシンの timezone はデフォルトで UTC です。プロダクションサーバと同じ timezone にしたい場合 \texttt{timezone} を使います。時刻を開発機の timezone に変更することは自己責任です。

この modifier は /etc/timezone を書き換え、すべての database および動作しているサービスを再起動するよう CircleCI に伝えます。この modifier は IANA の time zone database にリストされているいくつかの timezone をサポートします。そのリストは UNIX マシンの \texttt{/usr/share/zoneinfo} であるいは Wikipedia list of TZ database time zones の TZ カラムから見つけることができます。

デベロッパ、特に異なる timezone に跨がって協力開発しているものはプロダクションサーバにおいて UTC を使うということに注意をしてください。この選択で恐しい Daylight Saving Time (DST) バグを回避できます。

\subsection*{Hosts}
\label{sec:1-2-3}

IP adress にさまざまな hostname をアサインするために \texttt{/etc/hosts} にエントリを追加する必要があるかもしれません。以下の方法でそのマッピングが可能です。

\begin{reviewemlist}
machine:
  hosts:
    dev.circleci.com: 127.0.0.1
    foobar: 1.2.3.4
\end{reviewemlist}

CircleCI はこれらの値で \texttt{/etc/hosts} を自動で更新するでしょう。hostname は well{-}formed である必要があります。CircleCI は英数、ハイフン、ドットを含む hostname のみを受け入れるでしょう。

\subsection*{Ruby version}
\label{sec:1-2-4}

CircleCI は Ruby のバージョンを管理するために RVM を使います。.rvmrc、.ruby{-}version または Gemfile に記載された Ruby のバージョンが使われます。これらのファイルが無い場合、1.9.3{-}p448 あるいは 1.8.7{-}p358 の適当と思われるバージョンを使います。別の Ruby バージョンを使う場合、\texttt{machine} セクションの情報に含めることで CircleCI に知らせてください。以下がその方法の例です。

\begin{reviewemlist}
machine:
  ruby:
    version: 1.9.3{-}p0{-}falcon
\end{reviewemlist}

サポートしている Ruby のバージョンの完全なリストは\href{https://circleci.com/docs/environment\#ruby}{ここ}です。

\subsection*{Node.js version}
\label{sec:1-2-5}

CircleCI は Node のバージョン管理に NVM を使っています。完全なリストは \href{https://circleci.com/docs/environment\#nodejs}{supported Node versions}にあります。バージョンの記述が無い場合は CircleCI は 0.10.33 を使います。

以下がテストに使われる Node.js のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  node:
    version: 0.11.8
\end{reviewemlist}

\subsection*{Java version}
\label{sec:1-2-6}

以下がテストに使われる Java のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  java:
    version: openjdk7
\end{reviewemlist}

Java のデフォルトのバージョンは \texttt{oraclejdk7} です。完全なリストは \href{https://circleci.com/docs/environment\#java}{supported Java versions}にあります。

\subsection*{PHP version}
\label{sec:1-2-7}

CircleCI は php{-}build および phpenv を PHP バージョン管理のために使っています。以下がテストに使われる PHP のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  php:
    version: 5.4.5
\end{reviewemlist}

完全なリストは \href{https://circleci.com/docs/environment\#php}{supported PHP versions}にあります。

\subsection*{Python version}
\label{sec:1-2-8}

CircleCI は pyenv を Python バージョン管理のために使っています。以下がテストに使われる Python のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  python:
    version: 2.7.5
\end{reviewemlist}

完全なリストは \href{https://circleci.com/docs/environment\#python}{supported Python versions} にあります。

\subsection*{GHC version}
\label{sec:1-2-9}

\texttt{circle.yml} において \href{https://circleci.com/docs/environment\#haskell}{number of available GHC versions} から選択可能です。

\begin{reviewemlist}
machine:
  ghc:
    version: 7.8.3
\end{reviewemlist}

\subsection*{Other languages}
\label{sec:1-2-10}

\href{https://circleci.com/docs/environment}{test environment} ドキュメントに Python、Closure、C/C++、Golang および Erlang を含んだ他の言語に関する設定情報があります。

\subsection*{Databases and other services}
\label{sec:1-2-11}

CircleCI は沢山の \href{https://circleci.com/docs/environment\#databases}{databased and other services} をサポートします。最も人気のある Postgres、MySQL、Redis そして MongoDB を含む (localhost にバインドされた) ものが我々のビルドマシンデフォルトで動いています。

他のデータベースやサービスは \texttt{services} セクションから enable にできます。

\begin{reviewemlist}
machine:
  services:
    {-} cassandra
    {-} elasticsearch
    {-} rabbitmq{-}server
    {-} riak
    {-} beanstalkd
    {-} couchbase{-}server
    {-} neo4j
    {-} sphinxsearch
\end{reviewemlist}

\section{Code checkout from Github}
\label{sec:1-3}

\texttt{checkout} セクションはたいていかなり素の状態です (普通は何もしない) が、セクションに配置する必要があるかもしれない一般的な例を列挙します。checkout フェーズ後まで circle.yml は読まないため、ここでは \texttt{post} のみがサポートされます。

\subsubsection*{Example: git submodule の使用}
\label{sec:1-3-0-1}

\begin{reviewemlist}
checkout:
  post:
    {-} git submodule sync
    {-} git submodule update {-}{-}init
\end{reviewemlist}

\subsubsection*{Example: CircleCI での設定ファイルの上書き}
\label{sec:1-3-0-2}

\begin{reviewemlist}
checkout:
  post:
    {-} mv config/.app.yml config/app.yml
\end{reviewemlist}

\section{Project{-}specific dependencies}
\label{sec:1-4}

ほとんどの Web Programming 言語およびフレームワークは Ruby の bundler、Node.js の npm そして Python の pip を含むいくつかの依存関係の記述のフォームを持っており、CircleCI は自動でそれらの依存関係を探すコマンドを実行します。

\texttt{dependencies} コマンドを修正するために \texttt{override}、\texttt{pre} および \texttt{post} を使うことができます。以下に \texttt{dependencies} セクションの例を列挙します。

\subsubsection*{Example: npm と Node.js}
\label{sec:1-4-0-1}

\begin{reviewemlist}
dependencies:
  override:
    {-} npm install
\end{reviewemlist}

\subsubsection*{Example: bundler の特定のバージョンを使う}
\label{sec:1-4-0-2}

\begin{reviewemlist}
dependencies:
  pre:
    {-} gem uninstall bundler
    {-} gem install bundler {-}{-}pre
\end{reviewemlist}

\subsection*{Bundler flags}
\label{sec:1-4-1}

プロジェクトが bundler を含む場合、bundle install から除外される依存グループのリストするために \texttt{without} を含むことができます。

\begin{reviewemlist}
dependencies:
  bundler:
    without: [production, osx]
\end{reviewemlist}

\subsection*{Custom Cache Directories}
\label{sec:1-4-2}

CircleCI はビルド間の依存関係を cache します。cache にカスタムなディレクトリを含めるにはビルド間で cache したいディレクトリをリストする \texttt{cache\textunderscore{}directories} を使うことができます。以下は二点のカスタムディレクトリを cache するための例です。

\begin{reviewemlist}
dependencies:
  cache\textunderscore{}directories:
    {-} "assets/cache"    \# relative to the build directory
    {-} "\textasciitilde{}/assets/output" \# relative to the user's home directory
\end{reviewemlist}

cache は dependency の後に起こり cache\textunderscore{}directories に記載されたディレクトリはその前に有効になっている必要があります。

cache はプライベートであり、他のプロジェクトと共有されません。

\section{Database setup}
\label{sec:1-5}

Web フレームワークは一般的にデータベースの生成、schema の導入、そして migration のコマンドを含んでいます。データベースを modify するために \texttt{override}、\texttt{pre} および \texttt{post} を使うことができます。詳細は \href{https://circleci.com/docs/manually\#databases}{Setting up your test database} を確認してください。

わたしたちが推測した \texttt{database.yml} がイケてない場合には、わたしたちの設定コマンド (以下に例示) を \texttt{override} しなければならないかもしれません。そのような場合にはわたちたちに連絡し、わたしたちの推論を向上させるために Circle にお知らせください。

\begin{reviewemlist}
database:
  override:
    {-} mv config/database.ci.yml config/database.yml
    {-} bundle exec rake db:create db:schema:load {-}{-}trace
\end{reviewemlist}

FYI: \texttt{machine} セクションの \texttt{environment} modifier によるデータベース設定の格納場所を指定するオプションがあります。

\begin{reviewemlist}
machine:
  environment:
    DATABASE\textunderscore{}URL: postgres://ubuntu:@127.0.0.1:5432/circle\textunderscore{}test
\end{reviewemlist}

\section{Running your tests}
\label{sec:1-6}

テストの一番重要なパートはテストの実行です。

CircleCI は\texttt{overrice}、\texttt{per}、および \texttt{post} の \texttt{test} セクションにおける使用をサポートしています。しかし、このセクションは一つの小さな違いがあります。テストコマンドは一つが失敗しても全てが動きます。最初のエラーだけでなく全てのテストの失敗をあなたに教えることができるのです。

\subsubsection*{Example: Rspec の後に spinach を動かす}
\label{sec:1-6-0-1}

\begin{reviewemlist}
test:
  post:
    {-} bundle exec rake spinach:
        environment:
          RAILS\textunderscore{}ENV: test
\end{reviewemlist}

\subsubsection*{Example: 特別なディレクトリで phpunit を動かす}
\label{sec:1-6-0-2}

\begin{reviewemlist}
test:
  override:
    {-} phpunit my/special/subdirectory/tests
\end{reviewemlist}

CircleCI もテスト中に使われる file glob をリストできる \texttt{minitest\textunderscore{}globs} の使用をサポートします。

並行テスト時のデフォルト設定で CircleCI は test/unit、test/integration、test/functional ディレクトリの全てのテストを実行します。あなたはあなた自身で標準のディレクトリを置換するために minitest\textunderscore{}globs を追加できます。これはあなたが追加の又は非標準ディレクトリを持ち、MiniTest を並列でテストする時にのみ必要とされます

\subsubsection*{Example: minitest\textunderscore{}globs}
\label{sec:1-6-0-3}

\begin{reviewemlist}
test:
  minitest\textunderscore{}globs:
    {-} test/integration/**/*.rb
    {-} test/extra{-}dir/**/*.rb
\end{reviewemlist}

\section{Deployment}
\label{sec:1-7}

\texttt{deployment} セクションはオプションです。あなたはステージングあるいは本番環境にデプロイするためのコマンドを実行することができます。これらのコマンドはビルドが成功した後のみ実行されます。

\begin{reviewemlist}
deployment:
  production:
    branch: production
    commands:
      {-} ./deploy\textunderscore{}prod.sh
  staging:
    branch: master
    commands:
      {-} ./deploy\textunderscore{}staging.sh
\end{reviewemlist}

\texttt{deployment} セクションは複数のサブセクションから成ります。以下の例では片方は \texttt{production}、もう片方は \texttt{staging} という二つがあります。サブセクションの名前はユニークでなければなりません。それぞれのサブセクションは複数の branch をリストすることができますが、少なくともこれらのフィールドの一つは \texttt{branch} の名前が付けられている必要があります。複数 branch のインスタンスでは、ビルドされる branch の最初のものが実行されているものです。以下の例では開発者がリストされている三つの branch のいずれかを push した場合、\texttt{merge\textunderscore{}to\textunderscore{}master.sh} というスクリプトが実行されます。

\begin{reviewemlist}
deployment:
  automerge:
    branch: [dev\textunderscore{}alice, dev\textunderscore{}bob, dev\textunderscore{}carol]
    commands:
      {-} ./merge\textunderscore{}to\textunderscore{}master.sh
\end{reviewemlist}

\texttt{branch} フィールドも '/' で囲まれた正規表現で記述することができます (例: /feature\textunderscore{}.*/)。

\begin{reviewemlist}
deployment:
  feature:
    branch: /feature\textunderscore{}.*/
    commands:
      {-} ./deploy\textunderscore{}feature.sh
\end{reviewemlist}

必要に応じて deployment サブセクションにリポジトリの \texttt{owner} を記載することもできます。これはプロジェクトの複数 fork がある場合に有用ですが、片方のみがデプロイされる必要があります。例えば、プロジェクトガ "circleci" に依存しており、このような deployment サブセクションは deploy のみされるでしょう。そして他のユーザは deploy をトリガしない彼らの fork の master ブランチを push することができます。

\begin{reviewemlist}
deployment:
  master:
    branch: master
    owner: circleci
    commands:
      {-} ./deploy\textunderscore{}master.sh
\end{reviewemlist}

\subsection*{Tags}
\label{sec:1-7-1}

branch に基づいて deploy することに加えてタグに基づいた deploy ができます。

通常、タグの push はビルドを動かしません。あなたが作成したタグの名前にマッチする tag プロパティがある deployment 設定がある場合、マッチする deployment セクションとビルドが実行されるでしょう。

\href{https://help.github.com/articles/creating-releases/}{Cutting a release on Github} はタグを生成し、同じルールに従います。

注：現在、注釈付きのタグのみがサポートされています。lightweight タグの push はビルドをトリガしません。

以下の例では release{-}v1.05 という名前のタグを push がビルドと deploy をトリガします。qa{-}9502 タグの push はビルドをトリガしません。

\begin{reviewemlist}
deployment:
  release:
    tag: /release{-}.*/
    owner: circleci
    commands:
      {-} ./deploy\textunderscore{}master.sh
\end{reviewemlist}

\texttt{branch} プロパティと同様に、\texttt{tag} プロパティは正確な文字列又は正規表現が指定できます。

一般的な慣習は、1.2.3 というバージョンのために \texttt{v1.2.3} というタグを作ることです。以下の正規表現はそのパターンを実装するでしょう。

\begin{reviewemlist}
/v[0{-}9]+(\reviewbackslash{}.[0{-}9]+)*/
\end{reviewemlist}

v1、v1.2 そして v1.2.3 (等々) がマッチします。

\subsection*{SSH keys}
\label{sec:1-7-2}

SSH アクセスが要求されるサーバに deploy する場合、CircleCI に鍵をアップロードする必要があります。CircleCI の UI はプロジェクトの Project Settings {-}\textgreater{} SSH keys というページでこれを行なうことが可能です。一つ以上の SSH key の追加およびサブミットがあなたのマシンに dploy するために必要です。Hostname フィールドをブランクのままにしておくことで、鍵は全てのホスト向けに使われるでしょう。

\subsection*{Heroku}
\label{sec:1-7-3}

CircleCI も Heroku への deploy にファーストクラスなサポートを用意しています。\texttt{appname} に \texttt{git push} したいアプリを指定しなさい。ビルド成功すると、自動で deploy します。

\begin{reviewemlist}
deployment:
  staging:
    branch: master
    heroku:
      appname: foo{-}bar{-}123
\end{reviewemlist}

Heroku に deploy する設定は一つの余分なステップを要求します。Heroku のアーキテクハとセキュリティモデルのため、わたしたちは特定のユーザとして deploy する必要があります。あなたのプロジェクトのメンバ (おそらくあなた) はそのユーザとして登録を行う必要があります。CircleCI の UI はプロジェクトの Project Setting \textgreater{} Heroku settings ページでそれをすることができます。

\subsection*{Heroku with pre or post{-}deployment steps}
\label{sec:1-7-4}

Heroku に deploy し、その前後でコマンドを実行したい場合、'normal' な deployment な文法を使わなければなりません。

\begin{reviewemlist}
deployment:
    production:
      branch: production
      commands:
        {-} git push git@heroku.com:foo{-}bar{-}123.git \textdollar{}CIRCLE\textunderscore{}SHA1:master
        {-} heroku run rake db:migrate {-}{-}app foo{-}bar{-}123
\end{reviewemlist}

\section{Notifications}
\label{sec:1-8}

CircleCI は email による個別の通知を送付します。

ユーザ毎の email に加えて CircleCI はプロジェクトごとの通知を送付します。CircleCI はビルド完了時の webhook 送付もサポートします。CircleCI も HipChat、Campfire、Flowdock や IRC 通知をサポートします。プロジェクトの Project Settings \textgreater{} Notification ページでこれらの通知を設定します。

この例では指定された URL への JSON パケットを POST します。

\begin{reviewemlist}
notify:
  webhooks:
    \# A list of hook hashes, containing the URL field
    {-} url: https://example.com/hooks/circle
\end{reviewemlist}

JSON パケットは "payload" というキーで wrap されている事以外は同じビルドのための Build API 呼び出しの結果と同一です。

\begin{reviewemlist}
\{
  "payload": \{
    "vcs\textunderscore{}url" : "https://github.com/circleci/mongofinil",
    "build\textunderscore{}url" : "https://circleci.com/gh/circleci/mongofinil/22",
    "build\textunderscore{}num" : 22,
    "branch" : "master",
    ...
  \}
\}
\end{reviewemlist}

per branch build notification セクションにおいてビルド通知をチャットのチャネルで取得したいブランチのブラックリストまたはホワイトリストの記述を設定できる実験的な設定もあります。

\section{Specifying branches to build}
\label{sec:1-9}

CircleCI はデフォルトでリポジトリの任意のブランチの全ての push を試験します。全てのブランチの試験は全てのブランチでの品質を維持し、ブランチがデフォルトブランチにマージされる時の信頼を担保します。

しかし、CircleCI でビルドが blacklist ブランチかもしれません。この例は circle でのビルドから gh{-}pages を除外します。

\begin{reviewemlist}
general:
  branches:
    ignore:
      {-} gh{-}pages \# list of branches to ignore
      {-} /release\reviewbackslash{}/.*/ \# or ignore regexes
\end{reviewemlist}

ホワイトリストブランチだけビルドをトリガします。この例は circle での \texttt{master} および \texttt{feature{-}*} ブランチのビルドを制限します。

\begin{reviewemlist}
general:
  branches:
    only:
      {-} master \# list of branches to build
      {-} /feature{-}.*/ \# or regexes
\end{reviewemlist}

わたしたちは branch をホワイトリスト化することは推奨しません。それは作業注のコードが長い間統合されず試験されないことを意味し、わたしたちは試験されないコードがマージされる時の問題につながることを確認しています。

\texttt{circle.yml} はブランチ毎の設定ファイルです、そしてあるブランチを無視するブランチはそのブランチにのみ影響するでしょう。

\section{Specifying custom artivacts directories and files}
\label{sec:1-10}

Circle はデフォルトでリポジトリ root の全てのコマンドを実行します。しかし root の代わりにサブディレクトリにアプリケーションコードを格納した場合、\texttt{circle.yml} にビルドディレクトリを記述できます。例えば、api サブディレクトリをビルドディレクトリに設定するために、以下の設定を使うことができます。

\begin{reviewemlist}
general:
  build\textunderscore{}dir: api
\end{reviewemlist}

Circle はそのディレクトリのビルドコマンドと同様に推論を実行します。

\subsection*{カスタムアーティファクトディレクトリとファイルの指定}
\label{sec:1-10-1}

(デフォルトの \textdollar{}CIRCLE\textunderscore{}ARTIFACTS ディレクトリに加えて) artifact として保存されるファイルやディレクトリの指定ができます。

\begin{reviewemlist}
general:
  artifacts:
    {-} "selenium/screenshots" \# relative to the build directory
    {-} "\textasciitilde{}/simplecov" \# relative to the user's home directory
    {-} "test.txt" \# a single file, relative to the build directory
\end{reviewemlist}

ワイルドカードのようなより複雑な artifact の取り扱いが要求する場合、\textdollar{}CIRCLE\textunderscore{}ARTIFACTS ディレクトリへの成果物を移動することを推奨します。

\begin{reviewemlist}
test:
  post:
    {-} mkdir \textdollar{}CIRCLE\textunderscore{}ARTIFACTS/json\textunderscore{}output
    {-} mv solo/target/*.json \textdollar{}CIRCLE\textunderscore{}ARTIFACTS/json\textunderscore{}output
\end{reviewemlist}

\section{Experimental configuration}
\label{sec:1-11}

わたしたちの実験的なセクションは追加を検討している新しい設定オプションのアーリープレビューを提供する方法です。これらの設定は予告なしに変更する傾向があります。

\subsection*{Per branch build notification in chat channels}
\label{sec:1-11-1}

現時点で有効な唯一の実験的な設定はブランチの名前に基いたチャットチャネルへのビルド通知のためのブラックリスト、ホワイトリストメカニズムです。

"ignore" および "only" 設定の動作は Branches セクションにおけるビルドのためのブランチのブラックリストおよびホワイトリストと同様です。それぞれの設定は文字列ないし正規表現のリストを取ります。正規表現は '/' でその値が囲まれます。

以下の設定は "dev" または "experiment" で始まるか、'sandbox' という名前のブランチのビルドのためのチャットチャネル宛てビルド通知を抑制します

\begin{reviewemlist}
experimental:
  notify:
    branches:
      ignore:
        {-} /dev.*/
        {-} /experiment.*/
        {-} sandbox
\end{reviewemlist}

代わりに、ホワイトリストにマッチするブランチのための通知の送付が可能です。以下の設定は master ブランチおよび "feature" で始まるブランチの通知のみ送付するでしょう。

\begin{reviewemlist}
experimental:
  notify:
    branches:
      only:
        {-} master
        {-} /feature{-}.*/
\end{reviewemlist}

それらを組み合わせることができます。その場合ホワイトリストにマッチし、ブラックリストにマッチしないブランチの名前のみ、通知を受けとります。

\begin{reviewemlist}
experimental:
  notify:
    branches:
      only:
        {-} /feature.*/
      ignore:
        {-} /feature\reviewbackslash{}.experiment.*/
\end{reviewemlist}

"feature{-}1" という名前のブランチは通知が送付されますが、"feature.experiment{-}1' は送付されないでしょう。
\section{File structure and content}
\label{sec:1-1}

以下の六つの primary section より作られます。それぞれの section はテスト実行フェーズを表します。

\begin{itemize}
\item machine: VM をあなたの選択や要件に合わせます
\item checkout: あなたの git repo を clone し checkout します
\item dependencies: あなたのプロジェクトの言語固有の要件をセットアップします
\item database: あなたのテストのためのデータベースを用意します
\item test: あなたのテストを実行します
\item deployment: あなたのコードをあなたの Web サーバに deploy します
\end{itemize}

他に general と experimental というセクションがある模様。

\begin{itemize}
\item general: 固有のフェーズに関連しない全般的なビルド関連設定
\item experimental: 検討中の設定変更の early access preview
\end{itemize}

ほとんどのプロジェクトはフェーズの多くのための何らかを記述する必要はないでしょう。

セクションは bash コマンドのリストを含みます。コマンドを記述しない場合でも CircleCI がコードから推論するでしょう。コマンドはファイルに記載された順に実行され、全てのテストコマンドが実行されますが、設定中の非ゼロ値の戻りは早めにビルド失敗を発生させるでしょう。\texttt{override}、\texttt{pre}、\texttt{post} の追加で「どこ」や「いつ」コマンドが動くかを CircleCI が推論するコマンドに合わせて変更することができます。その仕組みは以下です。

\begin{itemize}
\item pre: CircleCI が推論するコマンドの前に実行されるコマンド
\item override: CircleCI が推論するコマンドの代わりに実行されるコマンド
\item post: CircleCI が推論するコマンドの後に実行されるコマンド
\end{itemize}

それぞれのコマンドは個別の shell にて実行されます。そうした事情で、前のコマンドにおける環境は共有されませんので \texttt{export foo=bar} が機能しないことに注意してください。もしグローバルな環境変数を設定したいのであれば、それらを以下に記載する Machine configuration セクションに記述することができます。

\subsection*{Modifiers}
\label{sec:1-1-1}

修飾子 (modifier) の追加によりそれぞれのコマンドを微調整できます。使うことができるものは以下。

\begin{itemize}
\item timeout: 出力なしで長い時間動いている場合、強制終了します (デフォルトは 600 秒)
\item pwd: この値をカレントディレクトリとしてコマンドを実行します
\item environment: コマンドのために設定される環境変数のリストを生成する hash
\item parallel: (test セクションのコマンドのみ) \href{https://circleci.com/docs/parallel-manual-setup}{manually set up parallelism} を使う場合はこの値を true にします
\item files: file list で識別される files はコマンド引数に追加されます。files はビルドが動いている全てのコンテナにわたって配布されます。詳細は \href{https://circleci.com/docs/parallel-manual-setup\#auto-splitting}{manual parallelism setup document} を確認のこと
\item background: true の場合、コマンドをバックグラウンドで実行します。shell コマンドの末端に '\&' を付けたものに似ていますが ssh 経由で確実に動きます。試験が接続するサーバを開始するのに便利です
\end{itemize}

YAML が新たなプロパティを追加する度、インデントについて非常に厳密であることに注意してください。このため modifiers はコマンドから 1 レベルインデントされていなければなりません。以下の例では \texttt{bundle install} が \texttt{timeout}、\texttt{environment}、および \texttt{pwd} のキーのハッシュ値とともに扱われます。

\begin{reviewemlist}
dependencies:
  override:
    {-} bundle install:
        timeout: 240
        environment:
          foo: bar
          foo2: bar2
        pwd:
          test\textunderscore{}dir
\end{reviewemlist}

\section{Machine configuration}
\label{sec:1-2}

\texttt{machine} セクションはテストを実行する VM の設定を可能します。

以下に \texttt{machine} セクションで設定される可能性があるものの一例です。

\begin{reviewemlist}
machine:
  timezone:
    America/Los\textunderscore{}Angeles
  ruby:
    version: 1.9.3{-}p0{-}falcon

test:
  post:
    {-} bundle exec rake custom:test:suite
\end{reviewemlist}

この例では \texttt{time zone} の設定と \texttt{Ruby version} と patchset の選択、そしてコマンドが終了した後で動作するカスタムテストコマンドが追加されている。

\texttt{machine} セクションでは \texttt{pre} および \texttt{post} がサポートされていますが、\texttt{override} はそうではありません。\texttt{machine pre} セクションにおいてはカスタム環境変数は有効ではないことに注意してください。

以下はどのように \texttt{circle.yml} を \texttt{pre} を使って CircleCI に導入されているものと異なるバージョンの \texttt{phantomjs} を導入するかという例です。

\begin{reviewemlist}
machine:
  pre:
    {-} curl {-}k {-}L {-}o phantomjs.tar.bz2 http://phantomjs.googlecode.com/files/phantomjs{-}1.8.2{-}linux{-}x86\textunderscore{}64.tar.bz2
    {-} tar {-}jxf phantomjs.tar.bz2
\end{reviewemlist}

\subsection*{Environment}
\label{sec:1-2-1}

\texttt{machine} セクションに \texttt{environment} の追加により、ビルドにおける全てのコマンドのための環境変数を設定します。CircleCI は全てのコマンドに新たな shell を使うことを覚えておいて下さい。\texttt{export foo=bar} は前に書いたとおり動きません。代わりに以下を include する必要があります。

\begin{reviewemlist}
machine:
  environment:
    foo: bar
    baz: 123
\end{reviewemlist}

この方法を使わない場合、\href{https://circleci.com/docs/environment-variables}{a number of other options} があります。

\subsection*{Timezone}
\label{sec:1-2-2}

マシンの timezone はデフォルトで UTC です。プロダクションサーバと同じ timezone にしたい場合 \texttt{timezone} を使います。時刻を開発機の timezone に変更することは自己責任です。

この modifier は /etc/timezone を書き換え、すべての database および動作しているサービスを再起動するよう CircleCI に伝えます。この modifier は IANA の time zone database にリストされているいくつかの timezone をサポートします。そのリストは UNIX マシンの \texttt{/usr/share/zoneinfo} であるいは Wikipedia list of TZ database time zones の TZ カラムから見つけることができます。

デベロッパ、特に異なる timezone に跨がって協力開発しているものはプロダクションサーバにおいて UTC を使うということに注意をしてください。この選択で恐しい Daylight Saving Time (DST) バグを回避できます。

\subsection*{Hosts}
\label{sec:1-2-3}

IP adress にさまざまな hostname をアサインするために \texttt{/etc/hosts} にエントリを追加する必要があるかもしれません。以下の方法でそのマッピングが可能です。

\begin{reviewemlist}
machine:
  hosts:
    dev.circleci.com: 127.0.0.1
    foobar: 1.2.3.4
\end{reviewemlist}

CircleCI はこれらの値で \texttt{/etc/hosts} を自動で更新するでしょう。hostname は well{-}formed である必要があります。CircleCI は英数、ハイフン、ドットを含む hostname のみを受け入れるでしょう。

\subsection*{Ruby version}
\label{sec:1-2-4}

CircleCI は Ruby のバージョンを管理するために RVM を使います。.rvmrc、.ruby{-}version または Gemfile に記載された Ruby のバージョンが使われます。これらのファイルが無い場合、1.9.3{-}p448 あるいは 1.8.7{-}p358 の適当と思われるバージョンを使います。別の Ruby バージョンを使う場合、\texttt{machine} セクションの情報に含めることで CircleCI に知らせてください。以下がその方法の例です。

\begin{reviewemlist}
machine:
  ruby:
    version: 1.9.3{-}p0{-}falcon
\end{reviewemlist}

サポートしている Ruby のバージョンの完全なリストは\href{https://circleci.com/docs/environment\#ruby}{ここ}です。

\subsection*{Node.js version}
\label{sec:1-2-5}

CircleCI は Node のバージョン管理に NVM を使っています。完全なリストは \href{https://circleci.com/docs/environment\#nodejs}{supported Node versions}にあります。バージョンの記述が無い場合は CircleCI は 0.10.33 を使います。

以下がテストに使われる Node.js のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  node:
    version: 0.11.8
\end{reviewemlist}

\subsection*{Java version}
\label{sec:1-2-6}

以下がテストに使われる Java のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  java:
    version: openjdk7
\end{reviewemlist}

Java のデフォルトのバージョンは \texttt{oraclejdk7} です。完全なリストは \href{https://circleci.com/docs/environment\#java}{supported Java versions}にあります。

\subsection*{PHP version}
\label{sec:1-2-7}

CircleCI は php{-}build および phpenv を PHP バージョン管理のために使っています。以下がテストに使われる PHP のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  php:
    version: 5.4.5
\end{reviewemlist}

完全なリストは \href{https://circleci.com/docs/environment\#php}{supported PHP versions}にあります。

\subsection*{Python version}
\label{sec:1-2-8}

CircleCI は pyenv を Python バージョン管理のために使っています。以下がテストに使われる Python のバージョンを設定する方法の例です。

\begin{reviewemlist}
machine:
  python:
    version: 2.7.5
\end{reviewemlist}

完全なリストは \href{https://circleci.com/docs/environment\#python}{supported Python versions} にあります。

\subsection*{GHC version}
\label{sec:1-2-9}

\texttt{circle.yml} において \href{https://circleci.com/docs/environment\#haskell}{number of available GHC versions} から選択可能です。

\begin{reviewemlist}
machine:
  ghc:
    version: 7.8.3
\end{reviewemlist}

\subsection*{Other languages}
\label{sec:1-2-10}

\href{https://circleci.com/docs/environment}{test environment} ドキュメントに Python、Closure、C/C++、Golang および Erlang を含んだ他の言語に関する設定情報があります。

\subsection*{Databases and other services}
\label{sec:1-2-11}

CircleCI は沢山の \href{https://circleci.com/docs/environment\#databases}{databased and other services} をサポートします。最も人気のある Postgres、MySQL、Redis そして MongoDB を含む (localhost にバインドされた) ものが我々のビルドマシンデフォルトで動いています。

他のデータベースやサービスは \texttt{services} セクションから enable にできます。

\begin{reviewemlist}
machine:
  services:
    {-} cassandra
    {-} elasticsearch
    {-} rabbitmq{-}server
    {-} riak
    {-} beanstalkd
    {-} couchbase{-}server
    {-} neo4j
    {-} sphinxsearch
\end{reviewemlist}

\section{Code checkout from Github}
\label{sec:1-3}

\texttt{checkout} セクションはたいていかなり素の状態です (普通は何もしない) が、セクションに配置する必要があるかもしれない一般的な例を列挙します。checkout フェーズ後まで circle.yml は読まないため、ここでは \texttt{post} のみがサポートされます。

\subsubsection*{Example: git submodule の使用}
\label{sec:1-3-0-1}

\begin{reviewemlist}
checkout:
  post:
    {-} git submodule sync
    {-} git submodule update {-}{-}init
\end{reviewemlist}

\subsubsection*{Example: CircleCI での設定ファイルの上書き}
\label{sec:1-3-0-2}

\begin{reviewemlist}
checkout:
  post:
    {-} mv config/.app.yml config/app.yml
\end{reviewemlist}

\section{Project{-}specific dependencies}
\label{sec:1-4}

ほとんどの Web Programming 言語およびフレームワークは Ruby の bundler、Node.js の npm そして Python の pip を含むいくつかの依存関係の記述のフォームを持っており、CircleCI は自動でそれらの依存関係を探すコマンドを実行します。

\texttt{dependencies} コマンドを修正するために \texttt{override}、\texttt{pre} および \texttt{post} を使うことができます。以下に \texttt{dependencies} セクションの例を列挙します。

\subsubsection*{Example: npm と Node.js}
\label{sec:1-4-0-1}

\begin{reviewemlist}
dependencies:
  override:
    {-} npm install
\end{reviewemlist}

\subsubsection*{Example: bundler の特定のバージョンを使う}
\label{sec:1-4-0-2}

\begin{reviewemlist}
dependencies:
  pre:
    {-} gem uninstall bundler
    {-} gem install bundler {-}{-}pre
\end{reviewemlist}

\subsection*{Bundler flags}
\label{sec:1-4-1}

プロジェクトが bundler を含む場合、bundle install から除外される依存グループのリストするために \texttt{without} を含むことができます。

\begin{reviewemlist}
dependencies:
  bundler:
    without: [production, osx]
\end{reviewemlist}

\subsection*{Custom Cache Directories}
\label{sec:1-4-2}

CircleCI はビルド間の依存関係を cache します。cache にカスタムなディレクトリを含めるにはビルド間で cache したいディレクトリをリストする \texttt{cache\textunderscore{}directories} を使うことができます。以下は二点のカスタムディレクトリを cache するための例です。

\begin{reviewemlist}
dependencies:
  cache\textunderscore{}directories:
    {-} "assets/cache"    \# relative to the build directory
    {-} "\textasciitilde{}/assets/output" \# relative to the user's home directory
\end{reviewemlist}

cache は dependency の後に起こり cache\textunderscore{}directories に記載されたディレクトリはその前に有効になっている必要があります。

cache はプライベートであり、他のプロジェクトと共有されません。

\section{Database setup}
\label{sec:1-5}

Web フレームワークは一般的にデータベースの生成、schema の導入、そして migration のコマンドを含んでいます。データベースを modify するために \texttt{override}、\texttt{pre} および \texttt{post} を使うことができます。詳細は \href{https://circleci.com/docs/manually\#databases}{Setting up your test database} を確認してください。

わたしたちが推測した \texttt{database.yml} がイケてない場合には、わたしたちの設定コマンド (以下に例示) を \texttt{override} しなければならないかもしれません。そのような場合にはわたちたちに連絡し、わたしたちの推論を向上させるために Circle にお知らせください。

\begin{reviewemlist}
database:
  override:
    {-} mv config/database.ci.yml config/database.yml
    {-} bundle exec rake db:create db:schema:load {-}{-}trace
\end{reviewemlist}

FYI: \texttt{machine} セクションの \texttt{environment} modifier によるデータベース設定の格納場所を指定するオプションがあります。

\begin{reviewemlist}
machine:
  environment:
    DATABASE\textunderscore{}URL: postgres://ubuntu:@127.0.0.1:5432/circle\textunderscore{}test
\end{reviewemlist}

\section{Running your tests}
\label{sec:1-6}

テストの一番重要なパートはテストの実行です。

CircleCI は\texttt{overrice}、\texttt{per}、および \texttt{post} の \texttt{test} セクションにおける使用をサポートしています。しかし、このセクションは一つの小さな違いがあります。テストコマンドは一つが失敗しても全てが動きます。最初のエラーだけでなく全てのテストの失敗をあなたに教えることができるのです。

\subsubsection*{Example: Rspec の後に spinach を動かす}
\label{sec:1-6-0-1}

\begin{reviewemlist}
test:
  post:
    {-} bundle exec rake spinach:
        environment:
          RAILS\textunderscore{}ENV: test
\end{reviewemlist}

\subsubsection*{Example: 特別なディレクトリで phpunit を動かす}
\label{sec:1-6-0-2}

\begin{reviewemlist}
test:
  override:
    {-} phpunit my/special/subdirectory/tests
\end{reviewemlist}

CircleCI もテスト中に使われる file glob をリストできる \texttt{minitest\textunderscore{}globs} の使用をサポートします。

並行テスト時のデフォルト設定で CircleCI は test/unit、test/integration、test/functional ディレクトリの全てのテストを実行します。あなたはあなた自身で標準のディレクトリを置換するために minitest\textunderscore{}globs を追加できます。これはあなたが追加の又は非標準ディレクトリを持ち、MiniTest を並列でテストする時にのみ必要とされます

\subsubsection*{Example: minitest\textunderscore{}globs}
\label{sec:1-6-0-3}

\begin{reviewemlist}
test:
  minitest\textunderscore{}globs:
    {-} test/integration/**/*.rb
    {-} test/extra{-}dir/**/*.rb
\end{reviewemlist}

\section{Deployment}
\label{sec:1-7}

\texttt{deployment} セクションはオプションです。あなたはステージングあるいは本番環境にデプロイするためのコマンドを実行することができます。これらのコマンドはビルドが成功した後のみ実行されます。

\begin{reviewemlist}
deployment:
  production:
    branch: production
    commands:
      {-} ./deploy\textunderscore{}prod.sh
  staging:
    branch: master
    commands:
      {-} ./deploy\textunderscore{}staging.sh
\end{reviewemlist}

\texttt{deployment} セクションは複数のサブセクションから成ります。以下の例では片方は \texttt{production}、もう片方は \texttt{staging} という二つがあります。サブセクションの名前はユニークでなければなりません。それぞれのサブセクションは複数の branch をリストすることができますが、少なくともこれらのフィールドの一つは \texttt{branch} の名前が付けられている必要があります。複数 branch のインスタンスでは、ビルドされる branch の最初のものが実行されているものです。以下の例では開発者がリストされている三つの branch のいずれかを push した場合、\texttt{merge\textunderscore{}to\textunderscore{}master.sh} というスクリプトが実行されます。

\begin{reviewemlist}
deployment:
  automerge:
    branch: [dev\textunderscore{}alice, dev\textunderscore{}bob, dev\textunderscore{}carol]
    commands:
      {-} ./merge\textunderscore{}to\textunderscore{}master.sh
\end{reviewemlist}

\texttt{branch} フィールドも '/' で囲まれた正規表現で記述することができます (例: /feature\textunderscore{}.*/)。

\begin{reviewemlist}
deployment:
  feature:
    branch: /feature\textunderscore{}.*/
    commands:
      {-} ./deploy\textunderscore{}feature.sh
\end{reviewemlist}

必要に応じて deployment サブセクションにリポジトリの \texttt{owner} を記載することもできます。これはプロジェクトの複数 fork がある場合に有用ですが、片方のみがデプロイされる必要があります。例えば、プロジェクトガ "circleci" に依存しており、このような deployment サブセクションは deploy のみされるでしょう。そして他のユーザは deploy をトリガしない彼らの fork の master ブランチを push することができます。

\begin{reviewemlist}
deployment:
  master:
    branch: master
    owner: circleci
    commands:
      {-} ./deploy\textunderscore{}master.sh
\end{reviewemlist}

\subsection*{Tags}
\label{sec:1-7-1}

branch に基づいて deploy することに加えてタグに基づいた deploy ができます。

通常、タグの push はビルドを動かしません。あなたが作成したタグの名前にマッチする tag プロパティがある deployment 設定がある場合、マッチする deployment セクションとビルドが実行されるでしょう。

\href{https://help.github.com/articles/creating-releases/}{Cutting a release on Github} はタグを生成し、同じルールに従います。

注：現在、注釈付きのタグのみがサポートされています。lightweight タグの push はビルドをトリガしません。

以下の例では release{-}v1.05 という名前のタグを push がビルドと deploy をトリガします。qa{-}9502 タグの push はビルドをトリガしません。

\begin{reviewemlist}
deployment:
  release:
    tag: /release{-}.*/
    owner: circleci
    commands:
      {-} ./deploy\textunderscore{}master.sh
\end{reviewemlist}

\texttt{branch} プロパティと同様に、\texttt{tag} プロパティは正確な文字列又は正規表現が指定できます。

一般的な慣習は、1.2.3 というバージョンのために \texttt{v1.2.3} というタグを作ることです。以下の正規表現はそのパターンを実装するでしょう。

\begin{reviewemlist}
/v[0{-}9]+(\reviewbackslash{}.[0{-}9]+)*/
\end{reviewemlist}

v1、v1.2 そして v1.2.3 (等々) がマッチします。

\subsection*{SSH keys}
\label{sec:1-7-2}

SSH アクセスが要求されるサーバに deploy する場合、CircleCI に鍵をアップロードする必要があります。CircleCI の UI はプロジェクトの Project Settings {-}\textgreater{} SSH keys というページでこれを行なうことが可能です。一つ以上の SSH key の追加およびサブミットがあなたのマシンに dploy するために必要です。Hostname フィールドをブランクのままにしておくことで、鍵は全てのホスト向けに使われるでしょう。

\subsection*{Heroku}
\label{sec:1-7-3}

CircleCI も Heroku への deploy にファーストクラスなサポートを用意しています。\texttt{appname} に \texttt{git push} したいアプリを指定しなさい。ビルド成功すると、自動で deploy します。

\begin{reviewemlist}
deployment:
  staging:
    branch: master
    heroku:
      appname: foo{-}bar{-}123
\end{reviewemlist}

Heroku に deploy する設定は一つの余分なステップを要求します。Heroku のアーキテクハとセキュリティモデルのため、わたしたちは特定のユーザとして deploy する必要があります。あなたのプロジェクトのメンバ (おそらくあなた) はそのユーザとして登録を行う必要があります。CircleCI の UI はプロジェクトの Project Setting \textgreater{} Heroku settings ページでそれをすることができます。

\subsection*{Heroku with pre or post{-}deployment steps}
\label{sec:1-7-4}

Heroku に deploy し、その前後でコマンドを実行したい場合、'normal' な deployment な文法を使わなければなりません。

\begin{reviewemlist}
deployment:
    production:
      branch: production
      commands:
        {-} git push git@heroku.com:foo{-}bar{-}123.git \textdollar{}CIRCLE\textunderscore{}SHA1:master
        {-} heroku run rake db:migrate {-}{-}app foo{-}bar{-}123
\end{reviewemlist}

\section{Notifications}
\label{sec:1-8}

CircleCI は email による個別の通知を送付します。

ユーザ毎の email に加えて CircleCI はプロジェクトごとの通知を送付します。CircleCI はビルド完了時の webhook 送付もサポートします。CircleCI も HipChat、Campfire、Flowdock や IRC 通知をサポートします。プロジェクトの Project Settings \textgreater{} Notification ページでこれらの通知を設定します。

この例では指定された URL への JSON パケットを POST します。

\begin{reviewemlist}
notify:
  webhooks:
    \# A list of hook hashes, containing the URL field
    {-} url: https://example.com/hooks/circle
\end{reviewemlist}

JSON パケットは "payload" というキーで wrap されている事以外は同じビルドのための Build API 呼び出しの結果と同一です。

\begin{reviewemlist}
\{
  "payload": \{
    "vcs\textunderscore{}url" : "https://github.com/circleci/mongofinil",
    "build\textunderscore{}url" : "https://circleci.com/gh/circleci/mongofinil/22",
    "build\textunderscore{}num" : 22,
    "branch" : "master",
    ...
  \}
\}
\end{reviewemlist}

per branch build notification セクションにおいてビルド通知をチャットのチャネルで取得したいブランチのブラックリストまたはホワイトリストの記述を設定できる実験的な設定もあります。

\section{Specifying branches to build}
\label{sec:1-9}

CircleCI はデフォルトでリポジトリの任意のブランチの全ての push を試験します。全てのブランチの試験は全てのブランチでの品質を維持し、ブランチがデフォルトブランチにマージされる時の信頼を担保します。

しかし、CircleCI でビルドが blacklist ブランチかもしれません。この例は circle でのビルドから gh{-}pages を除外します。

\begin{reviewemlist}
general:
  branches:
    ignore:
      {-} gh{-}pages \# list of branches to ignore
      {-} /release\reviewbackslash{}/.*/ \# or ignore regexes
\end{reviewemlist}

ホワイトリストブランチだけビルドをトリガします。この例は circle での \texttt{master} および \texttt{feature{-}*} ブランチのビルドを制限します。

\begin{reviewemlist}
general:
  branches:
    only:
      {-} master \# list of branches to build
      {-} /feature{-}.*/ \# or regexes
\end{reviewemlist}

わたしたちは branch をホワイトリスト化することは推奨しません。それは作業注のコードが長い間統合されず試験されないことを意味し、わたしたちは試験されないコードがマージされる時の問題につながることを確認しています。

\texttt{circle.yml} はブランチ毎の設定ファイルです、そしてあるブランチを無視するブランチはそのブランチにのみ影響するでしょう。

\section{Specifying custom artivacts directories and files}
\label{sec:1-10}

Circle はデフォルトでリポジトリ root の全てのコマンドを実行します。しかし root の代わりにサブディレクトリにアプリケーションコードを格納した場合、\texttt{circle.yml} にビルドディレクトリを記述できます。例えば、api サブディレクトリをビルドディレクトリに設定するために、以下の設定を使うことができます。

\begin{reviewemlist}
general:
  build\textunderscore{}dir: api
\end{reviewemlist}

Circle はそのディレクトリのビルドコマンドと同様に推論を実行します。

\subsection*{カスタムアーティファクトディレクトリとファイルの指定}
\label{sec:1-10-1}

(デフォルトの \textdollar{}CIRCLE\textunderscore{}ARTIFACTS ディレクトリに加えて) artifact として保存されるファイルやディレクトリの指定ができます。

\begin{reviewemlist}
general:
  artifacts:
    {-} "selenium/screenshots" \# relative to the build directory
    {-} "\textasciitilde{}/simplecov" \# relative to the user's home directory
    {-} "test.txt" \# a single file, relative to the build directory
\end{reviewemlist}

ワイルドカードのようなより複雑な artifact の取り扱いが要求する場合、\textdollar{}CIRCLE\textunderscore{}ARTIFACTS ディレクトリへの成果物を移動することを推奨します。

\begin{reviewemlist}
test:
  post:
    {-} mkdir \textdollar{}CIRCLE\textunderscore{}ARTIFACTS/json\textunderscore{}output
    {-} mv solo/target/*.json \textdollar{}CIRCLE\textunderscore{}ARTIFACTS/json\textunderscore{}output
\end{reviewemlist}

\section{Experimental configuration}
\label{sec:1-11}

わたしたちの実験的なセクションは追加を検討している新しい設定オプションのアーリープレビューを提供する方法です。これらの設定は予告なしに変更する傾向があります。

\subsection*{Per branch build notification in chat channels}
\label{sec:1-11-1}

現時点で有効な唯一の実験的な設定はブランチの名前に基いたチャットチャネルへのビルド通知のためのブラックリスト、ホワイトリストメカニズムです。

"ignore" および "only" 設定の動作は Branches セクションにおけるビルドのためのブランチのブラックリストおよびホワイトリストと同様です。それぞれの設定は文字列ないし正規表現のリストを取ります。正規表現は '/' でその値が囲まれます。

以下の設定は "dev" または "experiment" で始まるか、'sandbox' という名前のブランチのビルドのためのチャットチャネル宛てビルド通知を抑制します

\begin{reviewemlist}
experimental:
  notify:
    branches:
      ignore:
        {-} /dev.*/
        {-} /experiment.*/
        {-} sandbox
\end{reviewemlist}

代わりに、ホワイトリストにマッチするブランチのための通知の送付が可能です。以下の設定は master ブランチおよび "feature" で始まるブランチの通知のみ送付するでしょう。

\begin{reviewemlist}
experimental:
  notify:
    branches:
      only:
        {-} master
        {-} /feature{-}.*/
\end{reviewemlist}

それらを組み合わせることができます。その場合ホワイトリストにマッチし、ブラックリストにマッチしないブランチの名前のみ、通知を受けとります。

\begin{reviewemlist}
experimental:
  notify:
    branches:
      only:
        {-} /feature.*/
      ignore:
        {-} /feature\reviewbackslash{}.experiment.*/
\end{reviewemlist}

"feature{-}1" という名前のブランチは通知が送付されますが、"feature.experiment{-}1' は送付されないでしょう。
